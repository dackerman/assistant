sequenceDiagram
    participant Client
    participant Server
    participant DB
    participant AI_API
    participant ToolExecutor

    Note over Client,ToolExecutor: Start Stream Flow

    Client->>Server: Send chat message
    Server->>DB: INSERT prompt (state=CREATED)
    DB-->>Server: prompt_id

    Server->>AI_API: Send prompt to AI
    alt AI API Success
        AI_API-->>Server: Stream connection established
        Server->>DB: UPDATE prompt (state=IN_PROGRESS)
        
        loop Stream Events
            AI_API->>Server: Stream event (block_start/delta/end)
            
            Note over Server,DB: Transaction begins
            Server->>DB: INSERT event (prompt_id, type, delta)
            
            alt Block Start Event
                Server->>DB: INSERT block (index=N, type)
                Server->>DB: UPDATE prompt (current_block=N)
            else Block Delta Event  
                Server->>DB: UPDATE block (content += delta)
            else Block End Event
                alt Block Type = tool_use
                    Server->>DB: INSERT tool_call (state=created, tool_name, request, API_tool_id)
                    Server->>ToolExecutor: Execute tool async
                    Note over ToolExecutor: Tool runs in background
                end
            end
            Note over Server,DB: Transaction commits
            
            Server->>Client: Forward stream event
        end
        
        AI_API->>Server: message_stop
        
        alt Tool calls were created
            Server->>DB: UPDATE prompt (state=WAITING_FOR_TOOLS)
            Server->>DB: SELECT tool_calls WHERE prompt_id=? AND state IN (created,running)
            DB-->>Server: Pending tool calls
            
            Note over Server: Wait for all tools to complete
            
            Note over Server: Wait for all tools to complete or timeout
            
            Server->>DB: SELECT tool_calls WHERE prompt_id=?
            DB-->>Server: All tool results
            
            alt Tool timeout occurred (> 1 minute)
                Server->>DB: UPDATE tool_calls SET state=canceled WHERE updated_at < now() - 1 minute
                Server->>DB: UPDATE prompt (state=ERROR)
                Server->>Client: Stream error due to tool timeout
            else All tools completed successfully
                Server->>AI_API: Send tool results back to AI
                Note over Server,AI_API: Continue streaming with tool results
                loop More Stream Events
                    AI_API->>Server: Stream event
                    Note over Server,DB: Process events as before
                    Server->>Client: Forward stream event
                end
                AI_API->>Server: final message_stop
                Server->>DB: UPDATE prompt (state=COMPLETED)
                Server->>Client: Stream complete
            end
        else No tool calls
            Server->>DB: UPDATE prompt (state=COMPLETED)
            Server->>Client: Stream complete
        end
        
    else AI API Failure
        AI_API-->>Server: Connection failed
        Server->>DB: UPDATE prompt (state=FAILED, error)
        Server->>Client: Stream failed
    end

    Note over Client,ToolExecutor: Tool Execution (Async)
    
    ToolExecutor->>DB: UPDATE tool_call (state=running)
    ToolExecutor->>ToolExecutor: Execute tool logic
    
    alt Tool Success
        ToolExecutor->>DB: UPDATE tool_call (state=complete, response, updated_at)
    else Tool Error
        ToolExecutor->>DB: UPDATE tool_call (state=error, error, updated_at)
    else Tool Canceled (timeout or manual)
        ToolExecutor->>ToolExecutor: Kill running job
        ToolExecutor->>DB: UPDATE tool_call (state=canceled, updated_at)
    end

    Note over Client,ToolExecutor: Resume Stream Flow

    Client->>Server: Resume/reconnect to conversation
    Server->>DB: SELECT prompt WHERE id=?
    DB-->>Server: prompt (state, current_block, error)
    
    alt Prompt State = COMPLETED
        Server->>Client: Stream already complete
    else Prompt State = CANCELED
        Server->>Client: Stream was canceled
    else Prompt State = FAILED
        Server->>AI_API: Retry send prompt
        Note over Server,AI_API: Continue as Start Stream
    else Prompt State = ERROR
        Server->>DB: SELECT blocks WHERE prompt_id=?
        DB-->>Server: Completed blocks
        Server->>Server: Build partial message
        Server->>AI_API: Send prompt with context
        Note over Server,AI_API: Continue as Start Stream
    else Prompt State = WAITING_FOR_TOOLS
        Server->>DB: SELECT tool_calls WHERE prompt_id=?
        DB-->>Server: Tool call status
        Server->>Client: Stream waiting for tools
        Note over Server: Continue monitoring tools as in main flow
    else Prompt State = IN_PROGRESS
        Server->>DB: SELECT events WHERE prompt_id=? ORDER BY index
        DB-->>Server: All past events
        Server->>Client: Replay past events
        Server->>Client: Attach to current stream
    end

    Note over Client,ToolExecutor: Error Handling During Stream

    alt Stream Error During Processing
        AI_API->>Server: Stream error
        Server->>DB: UPDATE prompt (state=ERROR, error)
        Server->>Client: Stream error
        Note over Server: Can resume from ERROR state later
    end

    Note over Client,ToolExecutor: Cancel Stream Flow

    Client->>Server: Cancel stream request
    Server->>DB: SELECT prompt WHERE id=?
    DB-->>Server: prompt (state)
    
    alt Prompt State = IN_PROGRESS
        Server->>DB: SELECT tool_calls WHERE prompt_id=? AND state IN (created,running)
        DB-->>Server: Running tool calls
        
        loop Cancel running tools
            Server->>DB: UPDATE tool_call SET state=canceled
            Server->>ToolExecutor: Kill running job
        end
        
        Server->>DB: UPDATE prompt (state=CANCELED)
        Server->>AI_API: Cancel stream connection
        Server->>Client: Stream canceled
        
    else Prompt State = WAITING_FOR_TOOLS
        Server->>DB: UPDATE tool_calls SET state=canceled WHERE prompt_id=? AND state IN (created,running)
        Server->>ToolExecutor: Kill running jobs
        Server->>DB: UPDATE prompt (state=CANCELED)
        Server->>Client: Stream canceled
        
    else Other states (CREATED, FAILED, ERROR, COMPLETED, CANCELED)
        Server->>DB: UPDATE prompt (state=CANCELED)
        Server->>Client: Stream canceled
    end

    Note over Client,ToolExecutor: Client Reconnection

    Client->>Server: Reconnect with last_event_index
    Server->>DB: SELECT events WHERE prompt_id=? AND index > ?
    DB-->>Server: Missing events since disconnect
    
    loop Catch up events
        Server->>Client: Replay missing event
    end
    
    alt Stream still active
        Server->>Client: Attach to live stream
    else Stream completed while disconnected
        Server->>Client: Stream complete notification
    end